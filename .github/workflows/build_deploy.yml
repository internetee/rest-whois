name: build and deploy staging

on:
  push:
    branches:
      - staging-continuous-deployment

  pull_request:
    branches:
    - master

jobs:
  
  build_staging_image:
    runs-on: ubuntu-20.04

    steps:

      - uses: actions/checkout@v2

      - name: Set image tag
        run: |
          SHORT_SHA=$(git describe --always)
          echo "ghcr.io/internetee/rest-whois:RC_$SHORT_SHA" > TAG
          export TAG=$(cat TAG)

      - name: Setting up application
        env:
          ST_A_YML: ${{ secrets.ST_APPLICATION_YML }}
        run: |
          echo $ST_A_YML | base64 -di > ./config/application.yml

      # - name: Build image
      #   run: |
      #     docker build -t $(cat TAG) -f Dockerfile.generic .

      # - name: Push Docker images to gh container registry
      #   env:
      #       PASSWORD: ${{ secrets.GHCR }}
      #   run: |
      #     echo $PASSWORD | docker login ghcr.io -u eisbot --password-stdin
      #     docker push $(cat TAG)

      - name: Set VPN config
        env:
          OVPN: ${{ secrets.OVPN }}
          VPN_PWD: ${{ secrets.VPN_PWD }}
          P12: ${{ secrets.P12 }}
        run: |
          echo $VPN_PWD | base64 -di > client.pwd
          chmod 0600 client.pwd
          echo $OVPN | base64 -di >  config.ovpn
          echo $P12 | base64 -di > cert.p12

      - name: Install Open VPN
        run: sudo apt-get install openvpn

      - name: Deploy from remote server
        env:
          K_CONFIG: ${{ secrets.KUBE_CONFIG }}
          SSH_KEY: ${{ secrets.EISBOT_SSH_KEY }}
        run: |
          ls -la
          sudo openvpn --config config.ovpn --askpass client.pwd --auth-nocache --daemon&
          sleep 15
          # sudo route add -net 192.168.99.00/24 dev tun0
          ping -c 2 192.168.99.12
          eval `ssh-agent`
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          echo $SSH_KEY | base64 -di > ~/.ssh/key
          chmod 0600 ~/.ssh/key
          ssh-add ~/.ssh/key
          ssh-keyscan 192.168.99.12 > ~/.ssh/known_hosts
          route -n
          scp TAG runner@192.168.99.12:/home/runner/TAG
          ssh -T runner@192.168.99.12 << 'EOL'
          bash
          pwd
          cat TAG
          helm ls -A
          EOL

      # - name: Upgrade in rest-whois-staging
      #   run: |
      #     echo $K_CONFIG | base64 -di > kubeconfig
      #     export KUBECONFIG=./kubeconfig
      #     helm upgrade --install rwhois-st --set "image.tag=$(cat TAG)" charts --namespace=rwhois-st
