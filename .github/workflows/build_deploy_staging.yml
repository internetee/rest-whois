name: build and deploy staging


on:
  pull_request:
    paths-ignore:
      - '**.lock'
      - 'Gemfile'
      - '**.md'
    branches: [master]
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - unlocked

jobs:
  
  build_staging_image:
    runs-on: ubuntu-20.04

    steps:

      - uses: actions/checkout@v2

      - name: Set image tag
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c 1-7) #pr-s test commit of merged state
          echo "TAG=ghcr.io/internetee/auction_center:RC-$SHORT_SHA" >> $GITHUB_ENV
          echo "SHORT_TAG=RC-$SHORT_SHA" >> $GITHUB_ENV


      - name: Setting up application
        env:
          ST_A_YML: ${{ secrets.ST_APPLICATION_YML }}
        run: |
          echo $ST_A_YML | base64 -di > ./config/application.yml

      - name: Build image
        run: |
          docker build -t $TAG --build-arg RAILS_ENV=staging -f Dockerfile.generic .

      - name: Push Docker images to gh container registry
        env:
            PASSWORD: ${{ secrets.GHCR }}
        run: |
          echo $PASSWORD | docker login ghcr.io -u eisbot --password-stdin
          docker push $TAG

      - name: Get pull request reference number
        run: |
          OIFS=$IFS
          IFS='/'
          read -a parts <<< "$GITHUB_REF"
          IFS=OIFS
          echo "PR_REF=${parts[2]}" >> $GITHUB_ENV
          echo "Pull request #$PR_REF"

      - name: Get repo name
        run: |
          OIFS=$IFS
          IFS='/'
          read -a parts <<< "$GITHUB_REPOSITORY"
          IFS=OIFS
          echo "REPO=${parts[1]}" >> $GITHUB_ENV
          echo "Repo $REPO"

      - name: Set deploy config
        env:
          OVPN: ${{ secrets.OVPN }}
          VPN_PWD: ${{ secrets.VPN_PWD }}
          P12: ${{ secrets.P12 }}
          K_CONFIG: ${{ secrets.KUBE_CONFIG }}
          SSH_KEY: ${{ secrets.EISBOT_SSH_KEY }}
        run: |
          echo $VPN_PWD | base64 -di > client.pwd
          chmod 0600 client.pwd
          echo $OVPN | base64 -di >  config.ovpn
          echo $P12 | base64 -di > cert.p12
          mkdir -p ~/.ssh
          echo $SSH_KEY | base64 -di > ~/.ssh/key
          chmod 0600 ~/.ssh/key
          mkdir -p $REPO/$PR_REF
          cd $REPO/$PR_REF
          echo $K_CONFIG | base64 -di > kubeconfig
          chmod 0600 kubeconfig

      - name: Install Open VPN
        run: sudo apt-get install openvpn

      - name: Deploy from remote server
        run: |
          sudo openvpn --config config.ovpn --askpass client.pwd --auth-nocache --daemon&
          sleep 15
          ping -c 2 192.168.99.12
          eval `ssh-agent`
          touch ~/.ssh/known_hosts   
          ssh-add ~/.ssh/key
          ssh-keyscan 192.168.99.12 > ~/.ssh/known_hosts
          rsync -av "$REPO" runner@192.168.99.12:/home/runner/
          ssh -T runner@192.168.99.12 << EOSSH
          bash
          export KUBECONFIG=./kubeconfig
          helm repo add eisrepo https://internetee.github.io/helm-charts/
          helm repo update
          helm upgrade --install rwhois-st-"$PR_REF" --set image.tag="$SHORT_TAG",reference="$PR_REF" eisrepo/rest-whois --n rwhois-st
          rm kubeconfig
          EOSSH

